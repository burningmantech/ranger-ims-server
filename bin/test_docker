#!/bin/sh
#
# Start the IMS application in a Docker container and test it
#

. "$(dirname "$0")/.common.sh";

##
# HTTP
##

http_status() {
    head -1 | cut -d " " -f 2;
}


http_header() {
    name="$1"; shift;

    # FIXME: We're matching the ending carriage return with '.' here because
    # '\r ' doesn't seem to work.
    sed -n -e 's|^'"${name}"': \(.*\).$|\1|p';
}


http_body() {
    sed -n -e '/^.$/,$p' | tail -n +2;
}


http_get() {
    local port="$1"; shift;
    local path="$1"; shift;

    local e;

    curl                                        \
        --include --fail --silent --show-error  \
        "http://localhost:${port}${path}"       \
        && e=0 || e=$?;

    return ${e};
}


http_get_error() {
    local port="$1"; shift;
    local path="$1"; shift;

    local e;

    curl                                   \
        --include --silent --show-error    \
        "http://localhost:${port}${path}"  \
        && e=0 || e=$?;

    return ${e};
}


##
# Tests
##

fail() {
    echo "FAIL:" "$@";
}


diff_body() {
    local expected="$1"; shift;
    local received="$1"; shift;

    if ! diff --brief "${expected}" "${received}" > /dev/null; then
        fail "Received body does not match expected output.";
        diff -ud "${expected}" "${received}";
        return 1;
    fi;
}


test_root_resource() {
    echo "Testing root resource...";

    local response="$(mktemp)";
    local    error="$(mktemp)";

    local e;

    http_get "${host_ims_port}" "/" > "${response}" 2> "${error}" && e=0 || e=$?;

    if [ ${e} -eq 22 ]; then
        fail "Root resource not found.";
        return 1;
    fi;

    if [ ${e} -ne 0 ]; then
        fail "Error HTTP status from server.";
        echo "Error from curl:"; cat "${error}";
        echo "Response:"; cat "${response}";
        return 1;
    fi;

    local status="$(http_status < "${response}")";

    if [ ${status} -ne 200 ]; then
        fail "Expected HTTP status 200 (OK) for root resource.";
        echo "Response:"; cat "${response}";
        return 1;
    fi;

    local body="$(http_body < "${response}")";

    if [ "${body}" != "IMS" ]; then
        fail "Unexpected response body. (Expected \"IMS\".)"
        echo "Response:"; cat "${response}";
        return 1;
    fi;

    rm "${response}" "${error}";
}


test_ping_resource() {
    echo "Testing ping endpoint resource...";

    local response="$(mktemp)";
    local    error="$(mktemp)";

    local e;

    http_get "${host_ims_port}" "/ims/api/ping/" > "${response}" 2> "${error}" && e=0 || e=$?;

    if [ ${e} -eq 22 ]; then
        fail "Ping endpoint resource not found.";
        return 1;
    fi;

    if [ ${e} -ne 0 ]; then
        fail "Error HTTP status from server.";
        echo "Error from curl:"; cat "${error}";
        echo "Response:"; cat "${response}";
        return 1;
    fi;

    local status="$(http_status < "${response}")";

    if [ ${status} -ne 200 ]; then
        fail "Expected HTTP status 200 (OK) for ping endpoint resource.";
        echo "Response:"; cat "${response}";
        return 1;
    fi;

    local body="$(http_body < "${response}")";

    if [ "${body}" != '"ack"' ]; then
        fail "Unexpected response body. (Expected \"ack\".)"
        echo "Response:"; cat "${response}";
        return 1;
    fi;

    rm "${response}" "${error}";
}


start_db_container  || exit 10;
wait_for_db         || exit 10;
db_init             || exit 10;
start_ims_container || exit 10;
wait_for_ims        || exit 11;
test_root_resource  || exit 100;
test_ping_resource  || exit 200;

echo "Tests passed.";

cleanup_ims_container;
cleanup_db_container;
