#!/bin/sh
# -*- sh-basic-offset: 2 -*-

##
# Copyright (c) 2015 Apple Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##

set -e
set -u

wd="$(cd "$(dirname "$0")/.." && pwd)";

. "${wd}/bin/_build.sh";

do_setup="false";
develop > /dev/null;

##
# Argument handling
##

all_extras="false";
output="nested";

extras () {
  PYTHONPATH="${wd}:${PYTHONPATH:-}" "${bootstrap_python}" - 2>/dev/null << EOF
from __future__ import print_function
import setup
print(" ".join(setup.extras_requirements.keys()))
EOF
}

usage ()
{
  program="$(basename "$0")";

  if [ "${1--}" != "-" ]; then echo "$@"; echo; fi;

  echo "Usage: ${program} [-hanl] [extra ...]";
  echo "Supported extras: $(extras)";
  echo "Options:";
  echo "    -h Print this help and exit";
  echo "    -a Enable all extras";
  echo "    -n Output a nested list (default)";
  echo "    -l Output a simple list";

  if [ "${1-}" = "-" ]; then return 0; fi;
  exit 64;
}

while getopts 'hanl' option; do
  case "${option}" in
    '?') usage; ;;
      'h') usage -; exit 0; ;;
      'a') all_extras="true"; ;;
      'n') output="nested"; ;;
      'l') output="list"; ;;
  esac;
done;

shift $((${OPTIND} - 1));


##
# Do The Right Thing
##

cmd="${py_bindir}/eggdeps";

if "${all_extras}"; then
  extras="$(extras)";
else
  extras="$@";
fi;

extras="$(echo ${extras} | sed 's| |,|g')";

spec="$(setup_print name)[${extras}]";

case "${output}" in

  'nested')
    "${cmd}" "${spec}";
    ;;

  'list')
    PYTHONPATH="${wd}:${PYTHONPATH:-}" "${bootstrap_python}" - 2>/dev/null << EOF
from __future__ import print_function
import setup
print("\n".join($("${cmd}" --requirements "${spec}")))
EOF

esac;
