# Docs:
# https://help.github.com/en/actions/automating-your-workflow-with-github-actions



name: CI/CD

on: [push]


jobs:

  info:

    name: Workflow information
    runs-on: ubuntu-latest
    timeout-minutes: 1

    steps:

      - name: Print GitHub Context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "${GITHUB_CONTEXT}";

      - name: Print Job Context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "${JOB_CONTEXT}";

      - name: Print Steps Context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "${STEPS_CONTEXT}";

      - name: Print Runner Context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "${RUNNER_CONTEXT}";

      - name: Print Strategy Context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "${STRATEGY_CONTEXT}";

      - name: Print Matrix Context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "${MATRIX_CONTEXT}";


  flake8:

    name: Flake8 (linter)

    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:

      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: "3.7"

      - name: Install Tox
        run: pip install tox;

      - name: Run Flake8
        run: tox -e flake8;


  black:

    name: Black (linter)

    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:

      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: "3.7"

      - name: Install Tox
        run: pip install tox;

      - name: Run Black
        run: tox -e black;


  mypy:
    name: Mypy (static type checker)

    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:

      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: "3.7"

      - name: Install Tox
        run: pip install tox;

      - name: Run Mypy
        run: tox -e mypy;


  docs:
    name: Build documentation

    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:

      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: "3.7"

      - name: Install Tox
        run: pip install tox;

      - name: Build documentation
        run: tox -e docs;


  packaging:
    name: Packaging

    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:

      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: "3.7"

      - name: Install Tox
        run: pip install tox;

      - name: Check packaging
        run: tox -e packaging;


  unit:
    name: Unit Tests using Python ${{ matrix.python }} on Ubuntu

    needs: [flake8, black, mypy, docs, packaging]

    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        python: ["3.6", "3.7"]

    steps:

      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python }}

      - name: Install Tox
        run: pip install tox;

      - name: Run unit tests
        run: tox -e coverage-py,codecov;
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
          GITHUB_REF: ${{ github.ref }}
          GITHUB_COMMIT: ${{ github.sha }}
          GITHUB_USER: ${{ github.actor }}
          GITHUB_WORKFLOW: ${{ github.workflow }}

      - name: Upload Trial log artifact
        if: failure()
        uses: actions/upload-artifact@v1
        with:
          name: trial
          path: .tox/coverage-py/log/trial.log


  docker:
    name: Build Docker image

    needs: [unit]

    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:

      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Build Docker image
        run: ./bin/build;

      - name: Save Docker image
        run: docker image save ranger-ims-server:dev | gzip -9 > image.tgz;

      - name: Upload Docker image artifacts
        uses: actions/upload-artifact@v1
        with:
          name: docker
          path: image.tgz


  test-docker:

    name: Test Docker image

    needs: [docker]

    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:

      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Download Docker image artifact
        uses: actions/download-artifact@v1
        with:
          name: docker

      - name: Load Docker image
        run: gzip --uncompress --stdout docker/image.tgz | docker image load;

      - name: Test Docker image
        run: ./bin/test_docker;


  test-docker-trivy:

    name: Trivy (security scan)

    needs: [docker]

    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:

      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Download Docker image artifact
        uses: actions/download-artifact@v1
        with:
          name: docker

      - name: Load Docker image
        run: gzip --uncompress --stdout docker/image.tgz | docker image load;

      - name: Run Trivy
        run: docker run -v /var/run/docker.sock:/var/run/docker.sock --rm aquasec/trivy ranger-ims-server:dev;


  deploy-staging:
    name: Deploy image built from master branch to the staging environment

    needs: [test-docker]
    if: github.ref == 'refs/heads/master'

    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:

      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Download Docker image artifacts
        uses: actions/download-artifact@v1
        with:
          name: docker

      - name: Load Docker image
        run: gzip --uncompress --stdout docker/image.tgz | docker image load;

      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: "3.7"

      - name: Deploy to staging
        run: ./bin/deploy staging;
        env:
          # https://github.com/burningmantech/ranger-ims-server/settings/secrets
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_ECR_IMAGE_NAME: ${{ secrets.AWS_ECR_IMAGE_NAME }}
          AWS_ECS_CLUSTER_STAGING: rangers
          AWS_ECS_SERVICE_STAGING: ${{ secrets.AWS_ECS_SERVICE_STAGING }}
          NOTIFY_SMTP_HOST: ${{ secrets.NOTIFY_SMTP_HOST }}
          NOTIFY_SMTP_USER: ${{ secrets.NOTIFY_SMTP_USER }}
          NOTIFY_SMTP_PASSWORD: ${{ secrets.NOTIFY_SMTP_PASSWORD }}
          NOTIFY_EMAIL_RECIPIENT: ${{ secrets.NOTIFY_EMAIL_RECIPIENT }}
          NOTIFY_EMAIL_SENDER: ${{ secrets.NOTIFY_EMAIL_SENDER }}
          CI: true
          PROJECT_NAME: Ranger IMS Server
          REPOSITORY_ID: ${{ github.repository }}
          BUILD_NUMBER: 0
          BUILD_URL: https://github.com/burningmantech/ranger-ims-server/commit/${{ github.sha }}/checks
          COMMIT_ID: ${{ github.event.head_commit.id }}
          COMMIT_URL: ${{ github.event.head_commit.url }}
          COMMIT_AUTHOR_USER: ${{ github.event.head_commit.author.username }}
          COMMIT_AUTHOR_NAME: ${{ github.event.head_commit.author.name }}
          COMMIT_AUTHOR_EMAIL: ${{ github.event.head_commit.author.email }}
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
