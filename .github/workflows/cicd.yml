# Docs:
# https://help.github.com/en/articles/about-github-actions
# https://help.github.com/en/articles/configuring-a-workflow
# https://help.github.com/en/articles/workflow-syntax-for-github-actions


name: CI/CD

on: [push]


jobs:

  info:

    name: Workflow information
    runs-on: ubuntu-16.04
    timeout-minutes: 1

    steps:

      - name: Print GitHub Context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "${GITHUB_CONTEXT}"

      - name: Print Job Context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "${JOB_CONTEXT}"

      - name: Print Steps Context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "${STEPS_CONTEXT}"

      - name: Print Runner Context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "${RUNNER_CONTEXT}"

      - name: Print Strategy Context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "${STRATEGY_CONTEXT}"

      - name: Print Matrix Context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "${MATRIX_CONTEXT}"


  flake8:

    name: Flake8 (linter)

    runs-on: ubuntu-latest
    timeout-minutes: 1

    steps:

      - name: Checkout source code
        uses: actions/checkout@v1

      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.6'

      - name: Install Tox
        run: pip install tox

      - name: Run Flake8
        run: tox -e flake8


  mypy:
    name: Mypy (static type checker)

    runs-on: ubuntu-latest
    timeout-minutes: 1

    steps:

      - name: Checkout source code
        uses: actions/checkout@v1

      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.6'

      - name: Install Tox
        run: pip install tox

      - name: Run Mypy
        run: tox -e mypy


  unit:
    name: Unit Tests using Python ${{ matrix.python }} on Ubuntu

    needs: [flake8, mypy]

    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        python: ['3.6']

    steps:

      - name: Checkout source code
        uses: actions/checkout@v1

      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python }}

      - name: Install Tox
        run: pip install tox

      - name: Run unit tests
        run: tox -e coverage-py0,codecov
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
          GITHUB_REF: ${{ github.ref }}
          GITHUB_COMMIT: ${{ github.sha }}
          GITHUB_USER: ${{ github.actor }}
          GITHUB_WORKFLOW: ${{ github.workflow }}

      - name: Upload Trial log as artifact
        uses: actions/upload-artifact@v1
        with:
          name: trial
          path: .tox/coverage-py0/log/trial.log

      - name: Upload coverage report as artifact
        uses: actions/upload-artifact@v1
        with:
          name: coverage
          path: .tox/coverage-py0/log/coverage_report_html


  docker:
    name: Build Docker image

    needs: [unit]

    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:

      - name: Checkout source code
        uses: actions/checkout@v1

      - name: Build Docker image
        run: ./bin/build

      - name: Save Docker image
        run: docker image save ranger-ims-server:dev | gzip -9 > image.tgz

      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v1
        with:
          name: docker
          path: image.tgz


  deploy-staging:
    name: Deploy image built from master branch to the staging environment

    needs: [docker]
    if: github.ref == 'refs/heads/master'

    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:

      - name: Upload Docker image artifact
        uses: actions/download-artifact@v1
        with:
          name: docker

      - name: Load Docker image
        run: gzcat docker/image.tgz | docker image load

      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.6'

      - name: Deploy to staging
        run: ./bin/deploy staging
        env:
          # https://github.com/burningmantech/ranger-ims-server/settings/secrets
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_ECR_IMAGE_NAME: ${{ secrets.AWS_ECR_IMAGE_NAME }}
          AWS_ECS_CLUSTER_STAGING: rangers
          AWS_ECS_SERVICE_STAGING: ${{ secrets.AWS_ECS_SERVICE_STAGING }}
          NOTIFY_SMTP_HOST: ${{ secrets.NOTIFY_SMTP_HOST }}
          NOTIFY_SMTP_USER: ${{ secrets.NOTIFY_SMTP_USER }}
          NOTIFY_SMTP_PASSWORD: ${{ secrets.NOTIFY_SMTP_PASSWORD }}
          NOTIFY_EMAIL_RECIPIENT: ${{ secrets.NOTIFY_EMAIL_RECIPIENT }}
          NOTIFY_EMAIL_SENDER: ${{ secrets.NOTIFY_EMAIL_SENDER }}
          CI: true
          PROJECT_NAME: Ranger IMS Server
          REPOSITORY_ID: ${{ github.repository }}
          BUILD_NUMBER: 0
          BUILD_URL: https://github.com/burningmantech/ranger-ims-server/commit/${{ github.sha }}/checks
          COMMIT_ID: ${{ github.sha }}
          COMMIT_MESSAGE: ${{ github.event.commits.head_commit.message }}
