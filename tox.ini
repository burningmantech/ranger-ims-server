[tox]

envlist =
    lint, mypy
    test-py313
    coverage-py312
    coverage_report
    packaging

skip_missing_interpreters = {tty:True:False}


[default]

basepython = python3.12

setenv =
    PY_MODULE=ims

    PYTHONPYCACHEPREFIX={envtmpdir}/pycache


##
# Default environment: unit tests
##

[testenv]

description = run tests

basepython =
    py: python

    py312: python3.12
    py313: python3.13

runner = uv-venv-lock-runner
uv_sync_flags = --group=unit

passenv =
    {test,coverage}: IMS_TEST_*

setenv =
    {[default]setenv}

    coverage: COVERAGE_FILE={toxworkdir}/coverage.{envname}
    coverage: COVERAGE_PROCESS_START={toxinidir}/.coveragerc

    TRIAL_JOBS={env:TRIAL_JOBS:--jobs=2}
    HYPOTHESIS_STORAGE_DIRECTORY={toxworkdir}/hypothesis

commands =
    # Run trial without coverage
    test: trial --random=0 {env:TRIAL_JOBS} --logfile="{envlogdir}/trial.log" --temp-directory="{envlogdir}/trial.d" {posargs:{env:PY_MODULE}}

    # Run trial with coverage
    # Notes:
    #  - Because we run tests in parallel, which uses multiple subprocesses,
    #      we need to drop in a .pth file that causes coverage to start when
    #      Python starts. See:
    #      https://coverage.readthedocs.io/en/coverage-5.5/subprocess.html
    #  - We use coverage in parallel mode, then combine here to get the results
    #      to get a unified result for the current test environment.
    #  - Use `tox -e coverage_report` to generate a report for all environments.
    coverage: python -c 'f=open("{envsitepackagesdir}/zz_coverage.pth", "w"); f.write("import coverage; coverage.process_startup()\n")'
    coverage: coverage erase
    coverage: coverage run --parallel-mode --source="{env:PY_MODULE}" "{envdir}/bin/trial" --random=0 {env:TRIAL_JOBS} --logfile="{envlogdir}/trial.log" --temp-directory="{envlogdir}/trial.d" {posargs:{env:PY_MODULE}}
    coverage: coverage combine
    coverage: coverage xml -o {toxworkdir}/coverage.xml

    # Run coverage reports, ignore exit status
    coverage: - coverage report --skip-covered


##
# Lint
##

[testenv:lint]

description = run all linters

basepython = {[default]basepython}

runner = uv-venv-runner

deps = pre-commit==4.0.0

usedevelop = true
skip_install = True

commands =
    pre-commit run {posargs:--all-files}


##
# Mypy static type checking
##

[testenv:mypy]

description = run Mypy (static type checker)

basepython = {[default]basepython}

runner = uv-venv-lock-runner
uv_sync_flags = --group=mypy

usedevelop = true

deps =
    -r requirements/requirements-mypy.txt
    {[default]deps}

commands =
    mypy                                       \
        --cache-dir="{toxworkdir}/mypy_cache"  \
        {tty:--pretty:}                        \
        {posargs:src}


##
# Coverage report
##

[testenv:coverage_report]

description = generate coverage report

depends = coverage-py{312,313}

basepython = {[default]basepython}

runner = uv-venv-lock-runner
uv_sync_flags = --group=unit

usedevelop = true

setenv =
    {[default]setenv}

    COVERAGE_FILE={toxworkdir}/coverage

commands =
    coverage combine
    - coverage report
    - coverage html


##
# Packaging
##

[testenv:packaging]

description = check for potential packaging problems

depends = {test,coverage}-py{312,313}

basepython = {[default]basepython}

runner = uv-venv-runner

skip_install = True

deps =
    pip
    packaging==24.1
    twine==5.1.1

commands =
   pip wheel --wheel-dir "{envtmpdir}/dist" --no-deps {toxinidir}
   twine check "{envtmpdir}/dist/"*
