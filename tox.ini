[tox]

envlist =
    flake8, mypy
    coverage-py36
    #coverage_combine
    #docs

skip_missing_interpreters = {env:TOX_SKIP_MISSING_INTERPRETERS:True}


##
# Build (default environment)
##

[testenv]

basepython =
    py36: python3.6
    py37: python3.7

deps =
    {trial,coverage}: docker==3.3.0
    {trial,coverage}: hypothesis==3.56.10
    {trial,coverage}: mock==2.0.0
    coverage: coverage==4.5.1

passenv =
    IMS_TEST_*

    {trial,coverage}: CI
    {trial,coverage}: HYPOTHESIS_VERBOSITY_LEVEL

    # See https://github.com/codecov/codecov-python/blob/5b9d539a6a09bc84501b381b563956295478651a/README.md#using-tox
    codecov: TOXENV
    codecov: CI
    codecov: TRAVIS TRAVIS_*

setenv =
    PIP_DISABLE_PIP_VERSION_CHECK=1
    VIRTUAL_ENV_DISABLE_PROMPT=true

    coverage: COVERAGE_FILE={toxworkdir}/coverage/coverage.{envname}
    {coverage_combine,codecov}: COVERAGE_FILE={toxworkdir}/coverage/coverage

    {coverage,coverage_combine}: COVERAGE_HTML={envlogdir}/coverage_report_html
    {coverage_combine,codecov}: COVERAGE_XML={envlogdir}/coverage_report.xml

commands =
    "{toxinidir}/bin/environment"

    # Run trial without coverage
    trial: trial --random=0 --logfile="{envlogdir}/trial.log" --temp-directory="{envlogdir}/trial.d" {posargs:ims}

    # Create a directory for coverage reports
    coverage: python -c 'import os; d="{toxworkdir}/coverage"; os.makedirs(d) if not os.path.exists(d) else None'

    # Run trial with coverage
    coverage: coverage run "{envdir}/bin/trial" --random=0 --logfile="{envlogdir}/trial.log" --temp-directory="{envlogdir}/trial.d" {posargs:ims}

    # Run coverage reports, ignore exit status
    coverage: - coverage html -d "{env:COVERAGE_HTML}"
    coverage: - coverage report --skip-covered --omit "*/ims/legacy/*,*/test/*"

    coverage: python -c 'print("Coverage reports are at: {env:COVERAGE_HTML}/index.html")'


##
# Flake8 linting
##

[testenv:flake8]

basepython = python3.6

skip_install = True

deps =
    flake8==3.5.0
    flake8-bugbear==18.2.0
    flake8_docstrings==1.3.0
    flake8-import-order==0.17.1
    flake8-pep3101==1.2.1
    pep8-naming==0.7.0
    mccabe==0.6.1

commands =
    "{toxinidir}/bin/environment"

    flake8 {posargs:src/ims}


[flake8]

select = B,C,E,F,I,N,S,W

disable-noqa = True
show-source  = True
doctests     = True

# Codes: http://flake8.pycqa.org/en/latest/user/error-codes.html
ignore =
    # Do not perform calls in argument defaults.
    # Necessary for cast().
    B008,

    # Missing docstring in magic method.
    D105,

    # One-line docstring should fit on one line with quotes
    D200,

    # 1 blank line required between summary line and description
    D205,

    # First line should be in imperative mood
    D401,

    # multiple spaces before operator
    E221,

    # multiple spaces after ':'
    E241,

    # expected 2 blank lines
    E302,

    # too many blank lines
    E303,

    # expected 2 blank lines after class or function definition
    E305,

    # First line should end with a period.
    D400,

    # function name should be lowercase
    N802,

    # argument name should be lowercase
    N803,

    # first argument of a method should be named 'self'
    # Not true for Zope Interface classes
    N805,

    # variable in function should be lowercase
    N806,

    # lowercase imported as non lowercase
    N812,

    # camelcase imported as lowercase
    N813,

    # End of list (allows last item to end with trailing ',')
    EOL

# flake8-import-order: local module name space
application-import-names = ims

# McCabe complexity checker
max-complexity = 22



##
# Mypy linting
##

[testenv:mypy]

basepython = python3.6

skip_install = True


deps =
    mypy==0.600


commands =
    "{toxinidir}/bin/environment"

    "{toxinidir}/bin/mypy" --config-file="{toxinidir}/tox.ini" {posargs:src}


[mypy]

# Global settings

warn_redundant_casts = True
warn_unused_ignores = True
strict_optional = True
show_column_numbers = True

# Module default settings
# disallow_untyped_calls = True
disallow_untyped_defs = True
# warn_return_any = True

# Need some stub files to get rid of this
ignore_missing_imports = False



##
# Combine coverage reports
##

[testenv:coverage_combine]

basepython = python3.6

skip_install = True

deps = coverage==4.5.1


whitelist_externals =
    cp

commands =
    "{toxinidir}/bin/environment"

    coverage combine --append

    # Copy aside coverage data for each test environment in case we want to look at it later
    cp "{env:COVERAGE_FILE}" "{envlogdir}/coverage"

    # Run coverage reports
    coverage html -d "{env:COVERAGE_HTML}"
    coverage xml -o "{env:COVERAGE_XML}"

    coverage report --fail-under=100

    python -c 'print("Coverage reports are at: {env:COVERAGE_HTML}/index.html")'



##
# Publish to Codecov
##

[testenv:codecov]

basepython = python3.6

skip_install = True

deps =
    coverage==4.5.1
    codecov==2.0.15

commands =
    "{toxinidir}/bin/environment"

    coverage combine --append
    coverage xml -o "{env:COVERAGE_XML}"
    codecov -e TOXENV --required --file="{env:COVERAGE_XML}"



# ##
# # Build the documentation
# ##
#
# [testenv:docs]
#
# basepython = python3.6
#
#
# deps =
#     sphinx==1.7.0
#     sphinx_rtd_theme==0.2.4
#
# whitelist_externals =
#     cp
#     rm
#
# commands =
#     "{toxinidir}/bin/environment"
#
#     rm -fr "{envdir}/sphinx_source" "{toxworkdir}/dist/docs"
#     cp -r "{toxinidir}/docs" "{envdir}/sphinx_source"
#     sphinx-apidoc --separate --module-first --no-toc --output-dir "{envdir}/sphinx_source" "{toxinidir}/src/ims" {posargs:}
#     sphinx-build -W -b html -E "{envdir}/sphinx_source" "{toxworkdir}/dist/docs"



##
# Print dependencies
##

[testenv:dependencies]

basepython = python3.6

deps =

setenv =
    PIP_DISABLE_PIP_VERSION_CHECK=1
    VIRTUAL_ENV_DISABLE_PROMPT=true

commands =
    "{toxinidir}/bin/environment"

    pip freeze



##
# Run the service
##

[testenv:run]

basepython = python3.6

setenv =
    PIP_DISABLE_PIP_VERSION_CHECK=1
    VIRTUAL_ENV_DISABLE_PROMPT=true

commands =
    "{toxinidir}/bin/environment"

    "{envbindir}/ims_server" --config="{toxinidir}/conf/imsd.conf" --log-file=- {posargs}
