[tox]

envlist =
    lint, mypy, bandit
    test-py310
    coverage-py{311}
    coverage_report
    docs
    packaging

skip_missing_interpreters = {tty:True:False}


[default]

basepython = python3.11

deps =
    {test,coverage}: -r requirements/requirements-tests.txt

    coverage: {[testenv:coverage_report]deps}

setenv =
    PY_MODULE=ims

    PYTHONPYCACHEPREFIX={envtmpdir}/pycache


##
# Default environment: unit tests
##

[testenv]

description = run tests

basepython =
    py: python

    py310: python3.10
    py311: python3.11

deps = {[default]deps}

passenv =
    {test,coverage}: IMS_TEST_*

setenv =
    {[default]setenv}

    coverage: COVERAGE_FILE={toxworkdir}/coverage.{envname}
    coverage: COVERAGE_PROCESS_START={toxinidir}/.coveragerc

    TRIAL_JOBS={env:TRIAL_JOBS:--jobs=2}
    HYPOTHESIS_STORAGE_DIRECTORY={toxworkdir}/hypothesis

commands =
    # Run trial without coverage
    test: trial --random=0 {env:TRIAL_JOBS} --logfile="{envlogdir}/trial.log" --temp-directory="{envlogdir}/trial.d" {posargs:{env:PY_MODULE}}

    # Run trial with coverage
    # Notes:
    #  - Because we run tests in parallel, which uses multiple subprocesses,
    #      we need to drop in a .pth file that causes coverage to start when
    #      Python starts. See:
    #      https://coverage.readthedocs.io/en/coverage-5.5/subprocess.html
    #  - We use coverage in parallel mode, then combine here to get the results
    #      to get a unified result for the current test environment.
    #  - Use `tox -e coverage_report` to generate a report for all environments.
    coverage: python -c 'f=open("{envsitepackagesdir}/zz_coverage.pth", "w"); f.write("import coverage; coverage.process_startup()\n")'
    coverage: coverage erase
    coverage: coverage run --parallel-mode --source="{env:PY_MODULE}" "{envdir}/bin/trial" --random=0 {env:TRIAL_JOBS} --logfile="{envlogdir}/trial.log" --temp-directory="{envlogdir}/trial.d" {posargs:{env:PY_MODULE}}
    coverage: coverage combine
    coverage: coverage xml -o {toxworkdir}/coverage.xml

    # Run coverage reports, ignore exit status
    coverage: - coverage report --skip-covered


##
# Lint
##

[testenv:lint]

description = run all linters

basepython = {[default]basepython}

skip_install = True

deps =
    -r requirements/requirements-lint.txt

commands =
    pre-commit run {posargs:--all-files}


##
# Mypy static type checking
##

[testenv:mypy]

description = run Mypy (static type checker)

basepython = {[default]basepython}

deps =
    -r requirements/requirements-mypy.txt

    {[default]deps}

commands =
    mypy                                       \
        --cache-dir="{toxworkdir}/mypy_cache"  \
        {tty:--pretty:}                        \
        {posargs:setup.py src}


##
# Coverage report
##

[testenv:coverage_report]

description = generate coverage report

depends = coverage-py{310,311}

basepython = {[default]basepython}

skip_install = True

deps =
    -r requirements/requirements-coverage.txt

setenv =
    {[default]setenv}

    COVERAGE_FILE={toxworkdir}/coverage

commands =
    coverage combine
    - coverage report
    - coverage html


##
# Bandit security static analyzer
##

[testenv:bandit]

description = run Bandit (security static analyzer)

basepython = {[default]basepython}

skip_install = True

deps =
    -r requirements/requirements-bandit.txt

commands =
    bandit -c {toxinidir}/.bandit -r {posargs:src}


##
# Safety dependency security checker
##

[testenv:safety]

description = run Safety (dependency security checker)

basepython = {[default]basepython}

deps =
    -r requirements/requirements-safety.txt

commands =
    safety check


##
# Documentation
##

[testenv:docs]

description = build documentation

basepython = {[default]basepython}

deps =
    -r requirements/requirements-docs.txt

commands =
    sphinx-build                           \
        -b html -d "{envtmpdir}/doctrees"  \
        "{toxinidir}/docs"                 \
        "{toxinidir}/htmldocs"


[testenv:docs-auto]

description = build documentation and rebuild automatically

basepython = {[default]basepython}

deps =
    {[testenv:docs]deps}

commands =
    sphinx-autobuild                       \
        -b html -d "{envtmpdir}/doctrees"  \
        --host=localhost                   \
        "{toxinidir}/docs"                 \
        "{toxinidir}/htmldocs"


##
# Packaging
##

[testenv:packaging]

description = check for potential packaging problems

depends = {test,coverage}-py{310,311}

basepython = {[default]basepython}

skip_install = True

deps =
    -r requirements/requirements-packaging.txt

commands =
   pip wheel --wheel-dir "{envtmpdir}/dist" --no-deps {toxinidir}
   twine check "{envtmpdir}/dist/"*


##
# Print dependencies
##

[testenv:dependencies]

description = print dependencies

basepython = {[default]basepython}

recreate = true

deps =
    pipdeptree

commands =
    python -c 'print()'
    pip freeze --exclude=ranger-ims-server --exclude=pipdeptree

    python -c 'print()'
    pipdeptree


##
# Run the service
##

[testenv:run]

basepython = {[default]basepython}

commands =
    "{envbindir}/ims" --config="{toxinidir}/conf/imsd.conf" --log-file=- {posargs:server}
