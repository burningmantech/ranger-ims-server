[tox]

envlist =
    flake8, black, mypy
    coverage-py{36,37}
    coverage_report
    docs
    packaging

skip_missing_interpreters = {tty:True:False}


[default]

basepython = python3.7

setenv =
    PY_MODULE=ims

    PYTHONPYCACHEPREFIX={envtmpdir}/pycache


##
# Default environment: unit tests
##

[testenv]

description = run tests

basepython =
    py:   python
    py36: python3.6
    py37: python3.7
    py38: python3.8
    py39: python3.9
    pypy3: pypy3

deps =
    {test,coverage}: docker==4.2.0
    {test,coverage}: hypothesis==5.8.0
    {test,coverage}: mock==4.0.2
    coverage: {[testenv:coverage_report]deps}

passenv =
    {test,coverage}: CI
    {test,coverage}: IMS_TEST_*

setenv =
    {[default]setenv}

    coverage: COVERAGE_FILE={toxworkdir}/coverage.{envname}

commands =
    # Run trial without coverage
    test: trial --random=0 --logfile="{envlogdir}/trial.log" --temp-directory="{envlogdir}/trial.d" {posargs:{env:PY_MODULE}}

    # Run trial with coverage
    coverage: coverage run --source {env:PY_MODULE} "{envdir}/bin/trial" --random=0 --logfile="{envlogdir}/trial.log" --temp-directory="{envlogdir}/trial.d" {posargs:{env:PY_MODULE}}

    # Run coverage reports, ignore exit status
    coverage: - coverage report --skip-covered


##
# Black code formatting
##

[testenv:black]

description = run Black (linter)

basepython = {[default]basepython}

skip_install = True

deps =
    black==19.10b0

setenv =
    BLACK_LINT_ARGS=--check

commands =
    black {env:BLACK_LINT_ARGS:} src


[testenv:black-reformat]

description  = {[testenv:black]description} and reformat
basepython   = {[testenv:black]basepython}
skip_install = {[testenv:black]skip_install}
deps         = {[testenv:black]deps}
commands     = {[testenv:black]commands}


##
# Flake8 linting
##

[testenv:flake8]

description = run Flake8 (linter)

basepython = {[default]basepython}

skip_install = True

deps =
    flake8-bugbear==20.1.4
    flake8-docstrings==1.5.0
    flake8-import-order==0.18.1
    flake8-mutable==1.2.0
    flake8-pep3101==1.3.0
    flake8==3.7.9
    mccabe==0.6.1
    pep8-naming==0.10.0
    pycodestyle==2.5.0
    pydocstyle==5.0.2
    # pin pyflakes pending a release with https://github.com/PyCQA/pyflakes/pull/455
    git+git://github.com/PyCQA/pyflakes@ffe9386#egg=pyflakes

commands =
    flake8 {posargs:src/{env:PY_MODULE}}


[flake8]

# !!! BRING THE PAIN !!!
select = A,B,B9,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z

show-source = True
doctests    = True

max-line-length = 80

# Codes: http://flake8.pycqa.org/en/latest/user/error-codes.html
ignore =
    # Do not perform calls in argument defaults
    # (Necessary for cast())
    B008,

    # Missing docstring in magic method
    D105,

    # Missing docstring in __init__
    D107,

    # One-line docstring should fit on one line with quotes
    D200,

    # No blank lines allowed after function docstring
    D202,

    # 1 blank line required between summary line and description
    D205,

    # First line should end with a period
    D400,

    # First line should be in imperative mood
    D401,

    # First word of the first line should be properly capitalized
    D403,

    # whitespace before ':'
    E203,

    # missing whitespace after ','
    E231,

    # f-string is missing placeholders
    F999,

    # function name should be lowercase
    N802,

    # argument name should be lowercase
    N803,

    # variable in function should be lowercase
    N806,

    # lowercase imported as non lowercase
    N812,

    # variable in class scope should not be mixedCase
    N815,

    # variable in global scope should not be mixedCase
    N816,

    # line break before binary operator
    W503,

    # End of list (allows last item to end with trailing ',')
    EOL

# flake8-import-order: local module name space
application-import-names = ims

# McCabe complexity checker
max-complexity = 23


##
# Mypy static type checking
##

[testenv:mypy]

description = run Mypy (static type checker)

basepython = {[default]basepython}

deps =
    mypy==0.770

commands =
    mypy                                       \
        --config-file="{toxinidir}/tox.ini"    \
        --cache-dir="{toxworkdir}/mypy_cache"  \
        {tty:--pretty:}                        \
        {posargs:src}


[mypy]

# Global settings

check_untyped_defs       = True
disallow_incomplete_defs = True
disallow_untyped_defs    = True
no_implicit_optional     = True
show_column_numbers      = True
show_error_codes         = True
strict_optional          = True
warn_no_return           = True
warn_redundant_casts     = True
warn_return_any          = True
warn_unreachable         = True
warn_unused_ignores      = True

# Don't complain about dependencies known to lack type hints

[mypy-arrow.*]
ignore_missing_imports = True

[mypy-bcrypt.*]
ignore_missing_imports = True

[mypy-cattr]
ignore_missing_imports = True

[mypy-docker.*]
ignore_missing_imports = True

[mypy-hyperlink]
ignore_missing_imports = True

[mypy-hypothesis]
ignore_missing_imports = True
[mypy-hypothesis.*]
ignore_missing_imports = True

[mypy-klein]
ignore_missing_imports = True
[mypy-klein.*]
ignore_missing_imports = True

[mypy-twisted]
ignore_missing_imports = True
[mypy-twisted.*]
ignore_missing_imports = True

[mypy-zope.interface]
ignore_missing_imports = True


##
# Coverage report
##

[testenv:coverage_report]

description = generate coverage report

depends = {test,coverage}-py{36,37,38,39,py3}

basepython = {[default]basepython}

skip_install = True

deps =
    coverage==5.0.4

setenv =
    {[default]setenv}

    COVERAGE_FILE={toxworkdir}/coverage

commands =
    coverage combine
    - coverage report
    - coverage html


##
# Codecov
##

[testenv:codecov]

description = upload coverage to Codecov

depends = {[coverage_report]depends}

basepython = python

skip_install = True

deps =
    {[testenv:coverage_report]deps}

    codecov==2.0.22

passenv =
    # See https://github.com/codecov/codecov-python/blob/master/README.md#using-tox
    # And CI-specific docs:
    #   https://help.github.com/en/articles/virtual-environments-for-github-actions#default-environment-variables
    #   https://docs.travis-ci.com/user/environment-variables#default-environment-variables
    #   https://www.appveyor.com/docs/environment-variables/
    TOXENV CODECOV_* CI
    GITHUB_*
    TRAVIS TRAVIS_*
    APPVEYOR APPVEYOR_*

setenv =
    {[testenv:coverage_report]setenv}

    COVERAGE_XML={envlogdir}/coverage_report.xml

commands =
    # Note documentation for CI variables in passenv above
    coverage combine
    coverage xml -o "{env:COVERAGE_XML}"
    codecov --file="{env:COVERAGE_XML}" --env                 \
        GITHUB_REF GITHUB_COMMIT GITHUB_USER GITHUB_WORKFLOW  \
        TRAVIS_BRANCH TRAVIS_BUILD_WEB_URL                    \
        TRAVIS_COMMIT TRAVIS_COMMIT_MESSAGE                   \
        APPVEYOR_REPO_BRANCH APPVEYOR_REPO_COMMIT             \
        APPVEYOR_REPO_COMMIT_AUTHOR_EMAIL                     \
        APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED


##
# Documentation
##

[testenv:docs]

description = build documentation

basepython = {[default]basepython}

deps =
    Sphinx==3.0.0
    sphinx-rtd-theme==0.4.3

commands =
    sphinx-build                           \
        -b html -d "{envtmpdir}/doctrees"  \
        "{toxinidir}/docs"                 \
        "{toxinidir}/htmldocs"


[testenv:docs-auto]

description = build documentation and rebuild automatically

basepython = {[default]basepython}

deps =
    {[testenv:docs]deps}

    sphinx-autobuild==0.7.1

commands =
    sphinx-autobuild                       \
        -b html -d "{envtmpdir}/doctrees"  \
        --host=localhost                   \
        "{toxinidir}/docs"                 \
        "{toxinidir}/htmldocs"


##
# Packaging
##

[testenv:packaging]

description = check for potential packaging problems

basepython = {[default]basepython}

skip_install = True

deps =
   check-manifest==0.41
   readme-renderer==25.0
   twine==3.1.1

commands =
   check-manifest
   pip wheel --wheel-dir "{envtmpdir}/dist" --no-deps {toxinidir}
   twine check "{envtmpdir}/dist/"*


##
# Print dependencies
##

[testenv:dependencies]

description = print dependencies

basepython = {[default]basepython}

recreate = true

deps =

commands =
    pip freeze


##
# Run the service
##

[testenv:run]

basepython = {[default]basepython}

commands =
    "{envbindir}/ims" --config="{toxinidir}/conf/imsd.conf" --log-file=- {posargs:server}
