[tox]

envlist =
    flake8, mypy
    coverage-py36

skip_missing_interpreters = {tty:True:False}


##
# Build (default environment)
##

[testenv]

description = run tests

basepython =
    py0:  python
    py36: python3.6
    py37: python3.7
    py38: python3.8

deps =
    {trial,coverage}: docker==4.0.2
    {trial,coverage}: hypothesis==4.36.2
    {trial,coverage}: mock==3.0.5
    coverage: coverage==4.5.4

passenv =
    {trial,coverage}: CI
    {trial,coverage}: IMS_TEST_*
    {trial,coverage}: HYPOTHESIS_VERBOSITY_LEVEL

    # See https://github.com/codecov/codecov-python/blob/5b9d539a6a09bc84501b381b563956295478651a/README.md#using-tox
    codecov: TOXENV
    codecov: CI
    codecov: TRAVIS TRAVIS_*
    codecov: CODECOV_TOKEN
    codecov: GITHUB_*

setenv =
    PY_MODULE=ims

    PIP_DISABLE_PIP_VERSION_CHECK=1
    VIRTUAL_ENV_DISABLE_PROMPT=true

    coverage: COVERAGE_FILE={toxworkdir}/coverage/coverage.{envname}
    codecov: COVERAGE_FILE={toxworkdir}/coverage/coverage

    coverage: COVERAGE_HTML={envlogdir}/coverage_report_html
    codecov: COVERAGE_XML={envlogdir}/coverage_report.xml

commands =
    "{toxinidir}/bin/environment"

    # Run trial without coverage
    trial: trial --random=0 --logfile="{envlogdir}/trial.log" --temp-directory="{envlogdir}/trial.d" {posargs:{env:PY_MODULE}}

    # Create a directory for coverage reports
    coverage: python -c 'import os; d="{toxworkdir}/coverage"; os.makedirs(d) if not os.path.exists(d) else None'

    # Run trial with coverage
    coverage: coverage run --source {env:PY_MODULE} "{envdir}/bin/trial" --random=0 --logfile="{envlogdir}/trial.log" --temp-directory="{envlogdir}/trial.d" {posargs:{env:PY_MODULE}}

    # Run coverage reports, ignore exit status
    coverage: - coverage html -d "{env:COVERAGE_HTML}"
    coverage: - coverage report --skip-covered --omit "*/ims/legacy/*,*/test/*"

    coverage: python -c 'print("Coverage reports are at: {env:COVERAGE_HTML}/index.html")'


##
# Flake8 linting
##

[testenv:flake8]

description = run Flake8 (linter)

basepython = python3.6

skip_install = True

# Pin pydocstyle to version 3: see https://gitlab.com/pycqa/flake8-docstrings/issues/36
deps =
    flake8-bugbear==19.8.0
    flake8-docstrings==1.4.0
    flake8-import-order==0.18.1
    flake8-pep3101==1.2.1
    flake8==3.7.8
    mccabe==0.6.1
    pep8-naming==0.8.2
    pydocstyle==4.0.1

commands =
    "{toxinidir}/bin/environment"

    flake8 {posargs:src/{env:PY_MODULE}}


[flake8]

select = B,C,D,E,F,I,N,S,W

disable-noqa = True
show-source  = True
doctests     = True

# Codes: http://flake8.pycqa.org/en/latest/user/error-codes.html
ignore =
    # Do not perform calls in argument defaults
    # (Necessary for cast())
    B008,

    # Do not call getattr with a constant attribute value, it is not any safer than normal property access
    B009,

    # Do not call setattr with a constant attribute value, it is not any safer than normal property access
    B010,

    # Missing docstring in magic method
    D105,

    # Missing docstring in __init__
    D107,

    # One-line docstring should fit on one line with quotes
    D200,

    # 1 blank line required between summary line and description
    D205,

    # First line should end with a period
    D400,

    # First line should be in imperative mood
    D401,

    # First word of the first line should be properly capitalized
    D403,

    # multiple spaces before operator
    E221,

    # multiple spaces after ':'
    E241,

    # expected 1 blank lines
    E301,

    # expected 2 blank lines
    E302,

    # too many blank lines
    E303,

    # expected 2 blank lines after class or function definition
    E305,

    # function name should be lowercase
    N802,

    # argument name should be lowercase
    N803,

    # first argument of a method should be named 'self'
    N805,

    # variable in function should be lowercase
    N806,

    # lowercase imported as non lowercase
    N812,

    # camelcase imported as lowercase
    N813,

    # variable in class scope should not be mixedCase
    N815,

    # variable in global scope should not be mixedCase
    N816,

    # line break after binary operator
    W504,

    # End of list (allows last item to end with trailing ',')
    EOL

# flake8-import-order: local module name space
application-import-names = ims

# McCabe complexity checker
max-complexity = 23



##
# Mypy linting
##

[testenv:mypy]

description = run Mypy (type checker)

basepython = python3.6

skip_install = True


deps =
    mypy==0.720


commands =
    "{toxinidir}/bin/environment"

    "{toxinidir}/bin/mypy" --config-file="{toxinidir}/tox.ini" {posargs:src}


[mypy]

# Global settings

warn_redundant_casts = True
warn_unused_ignores = True
strict_optional = True
show_column_numbers = True

# Module default settings
# disallow_untyped_calls = True
disallow_untyped_defs = True
# warn_return_any = True

# Need some stub files to get rid of this
ignore_missing_imports = False



##
# Publish to Codecov
##

[testenv:codecov]

description = upload coverage to Codecov

basepython = python

skip_install = True

deps =
    coverage==4.5.4
    codecov==2.0.15

commands =
    "{toxinidir}/bin/environment"

    coverage combine --append
    coverage xml -o "{env:COVERAGE_XML}"
    codecov --required --file="{env:COVERAGE_XML}" --env GITHUB_REF GITHUB_COMMIT GITHUB_USER GITHUB_WORKFLOW



##
# Print dependencies
##

[testenv:dependencies]

description = print dependencies

basepython = python3.6

recreate = true

deps =

commands =
    "{toxinidir}/bin/environment"

    pip freeze



##
# Run the service
##

[testenv:run]

basepython = python3.6

commands =
    "{toxinidir}/bin/environment"

    "{envbindir}/ims_server" --config="{toxinidir}/conf/imsd.conf" --log-file=- {posargs}
