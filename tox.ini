[tox]

envlist =
    flake8, black, mypy, bandit
    coverage-py{39}
    coverage_report
    docs
    packaging

skip_missing_interpreters = {tty:True:False}


[default]

basepython = python3.9

setenv =
    PY_MODULE=ims

    PYTHONPYCACHEPREFIX={envtmpdir}/pycache


##
# Default environment: unit tests
##

[testenv]

description = run tests

basepython =
    py:   python
    py39: python3.9
    pypy3: pypy3

deps =
    {test,coverage}: docker==4.4.0
    {test,coverage}: hypothesis==5.43.3
    {test,coverage}: mock==4.0.3
    coverage: {[testenv:coverage_report]deps}

passenv =
    {test,coverage}: CI
    {test,coverage}: IMS_TEST_*

setenv =
    {[default]setenv}

    coverage: COVERAGE_FILE={toxworkdir}/coverage.{envname}

commands =
    # Run trial without coverage
    test: trial --random=0 --logfile="{envlogdir}/trial.log" --temp-directory="{envlogdir}/trial.d" {posargs:{env:PY_MODULE}}

    # Run trial with coverage
    coverage: coverage run --source {env:PY_MODULE} "{envdir}/bin/trial" --random=0 --logfile="{envlogdir}/trial.log" --temp-directory="{envlogdir}/trial.d" {posargs:{env:PY_MODULE}}

    # Run coverage reports, ignore exit status
    coverage: - coverage report --skip-covered


##
# Lint
##

[testenv:lint]

description = run all linters

basepython = {[default]basepython}

skip_install = True

deps =
    pre-commit==2.9.3

commands =
    pre-commit run {posargs:--all-files --show-diff-on-failure}


##
# Mypy static type checking
##

[testenv:mypy]

description = run Mypy (static type checker)

basepython = {[default]basepython}

deps =
    mypy==0.790

commands =
    mypy                                       \
        --cache-dir="{toxworkdir}/mypy_cache"  \
        {tty:--pretty:}                        \
        {posargs:setup.py src}


##
# Coverage report
##

[testenv:coverage_report]

description = generate coverage report

depends = {test,coverage}-py{36,37,38,39,py3}

basepython = {[default]basepython}

skip_install = True

deps =
    coverage==5.3

setenv =
    {[default]setenv}

    COVERAGE_FILE={toxworkdir}/coverage

commands =
    coverage combine
    - coverage report
    - coverage html


##
# Codecov
##

[testenv:codecov]

description = upload coverage to Codecov

depends = {[coverage_report]depends}

basepython = python

skip_install = True

deps =
    {[testenv:coverage_report]deps}

    codecov==2.1.10

passenv =
    # See https://github.com/codecov/codecov-python/blob/master/README.md#using-tox
    # And CI-specific docs:
    #   https://help.github.com/en/articles/virtual-environments-for-github-actions#default-environment-variables
    #   https://docs.travis-ci.com/user/environment-variables#default-environment-variables
    #   https://www.appveyor.com/docs/environment-variables/
    TOXENV CODECOV_* CI
    GITHUB_*
    TRAVIS TRAVIS_*
    APPVEYOR APPVEYOR_*

setenv =
    {[testenv:coverage_report]setenv}

    COVERAGE_XML={envlogdir}/coverage_report.xml

commands =
    # Note documentation for CI variables in passenv above
    coverage combine
    coverage xml -o "{env:COVERAGE_XML}"
    codecov --file="{env:COVERAGE_XML}" --env                 \
        GITHUB_REF GITHUB_COMMIT GITHUB_USER GITHUB_WORKFLOW  \
        TRAVIS_BRANCH TRAVIS_BUILD_WEB_URL                    \
        TRAVIS_COMMIT TRAVIS_COMMIT_MESSAGE                   \
        APPVEYOR_REPO_BRANCH APPVEYOR_REPO_COMMIT             \
        APPVEYOR_REPO_COMMIT_AUTHOR_EMAIL                     \
        APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED


##
# Bandit security static analyzer
##

[testenv:bandit]

description = run Bandit (security static analyzer)

basepython = {[default]basepython}

skip_install = True

deps =
    bandit==1.6.3

commands =
    bandit -c {toxinidir}/.bandit -r {posargs:src}


##
# Safety dependency security checker
##

[testenv:safety]

description = run Safety (dependency security checker)

basepython = {[default]basepython}

deps =
    safety==1.9.0

commands =
    safety check


##
# Documentation
##

[testenv:docs]

description = build documentation

basepython = {[default]basepython}

skip_install = True

deps =
    Sphinx==3.3.1
    sphinx-rtd-theme==0.5.0

commands =
    sphinx-build                           \
        -b html -d "{envtmpdir}/doctrees"  \
        "{toxinidir}/docs"                 \
        "{toxinidir}/htmldocs"


[testenv:docs-auto]

description = build documentation and rebuild automatically

basepython = {[default]basepython}

deps =
    {[testenv:docs]deps}

    sphinx-autobuild==2020.9.1

commands =
    sphinx-autobuild                       \
        -b html -d "{envtmpdir}/doctrees"  \
        --host=localhost                   \
        "{toxinidir}/docs"                 \
        "{toxinidir}/htmldocs"


##
# Packaging
##

[testenv:packaging]

description = check for potential packaging problems

basepython = {[default]basepython}

skip_install = True

deps =
   readme-renderer==28.0
   twine==3.2.0

commands =
   pip wheel --wheel-dir "{envtmpdir}/dist" --no-deps {toxinidir}
   twine check "{envtmpdir}/dist/"*


##
# Print dependencies
##

[testenv:dependencies]

description = print dependencies

basepython = {[default]basepython}

recreate = true

deps =

commands =
    pip freeze


##
# Run the service
##

[testenv:run]

basepython = {[default]basepython}

commands =
    "{envbindir}/ims" --config="{toxinidir}/conf/imsd.conf" --log-file=- {posargs:server}
