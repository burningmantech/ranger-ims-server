<!DOCTYPE html>
<html xmlns:t="http://twistedmatrix.com/ns/twisted.web.template/0.1" t:render="root">

  <head t:render="head">
    <script><t:attr name="src"><t:slot name="moment_js_url" /></t:attr></script>
    <script><t:attr name="src"><t:slot name="ims_js_url" /></t:attr></script>
  </head>

  <body><div t:render="container">

    <div class="row">
        <div class="col-sm-4 text-left">
          <div class="form-group">
            <label class="control-label">Incident #:</label>
            <span id="incident_number" class="form-control-static" />
          </div>
        </div>
        <div class="col-sm-4 text-center">
          <div class="form-group">
            <label class="control-label">State:</label>
            <select id="incident_state" class="form-control input-sm auto-width" onchange="update_state()">
              <option value="new"       >New       </option>
              <option value="on_hold"   >On Hold   </option>
              <option value="dispatched">Dispatched</option>
              <option value="on_scene"  >On Scene  </option>
              <option value="closed"    >Closed    </option>
            </select>
          </div>
        </div>
        <div class="col-sm-4 text-right">
          <div class="form-group">
            <label class="control-label">Priority:</label>
            <select id="incident_priority" class="form-control input-sm auto-width" onchange="update_priority()">
              <option value="High"  >High  </option>
              <option value="Normal">Normal</option>
              <option value="Low"   >Low   </option>
            </select>
          </div>
        </div>
    </div>

    <div class="row">
      <div class="col-sm-12">
        <div class="well well-sm flex-input-container">
          <label>Summary:</label>
          <input
            id="incident_summary" class="form-control input-sm"
            type="text" inputmode="latin-prose"
            placeholder="One-line summary of incidentâ€¦"
            onchange="update_summary()"
          />
        </div>
      </div>
    </div>

    <div class="row">
      <div class="col-sm-6">
        <label>Rangers:</label>
        <div class="well well-sm">
          <ul id="incident_rangers_list" class="list-group list-group-small">
            <li class="list-group-item" />
          </ul>
        </div>
      </div>
      <div class="col-sm-6">
        <label>Incident Types</label>
        <div class="well well-sm">
          <ul id="incident_types_list" class="list-group list-group-small">
            <li class="list-group-item" />
          </ul>
        </div>
      </div>
    </div>

    <div class="row">
      <div class="col-sm-12">
        <label>Location</label>
        <div class="well well-sm">
          <form class="form-horizontal">
            <div class="form-group">
              <label class="col-sm-1 control-label">Name:</label>
              <div class="col-sm-11">
                <input
                  id="incident_location_name" class="form-control input-sm"
                  type="text" inputmode="latin-prose"
                  placeholder="Name of location"
                />
              </div>
            </div>
            <div class="form-group">
              <label class="col-sm-1 control-label">Address:</label>
              <div class="col-sm-11">
                <select id="incident_location_address_radial_hour" class="form-control input-sm auto-width">
                  <option value="" />
                </select>
                :
                <select id="incident_location_address_radial_minute" class="form-control input-sm auto-width">
                  <option value="" />
                </select>
                @
                <select id="incident_location_address_concentric" class="form-control input-sm auto-width">
                  <option value="" />
                </select>
              </div>
            </div>
            <div class="form-group">
              <label class="col-sm-1 control-label">Description:</label>
              <div class="col-sm-11">
                <input
                  id="incident_location_description" class="form-control input-sm"
                  type="text" inputmode="latin-prose"
                  placeholder="Other identifying info"
                />
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>

    <div class="row">
      <div class="col-sm-12">
        <label>Incident Report</label>
        <div class="well well-sm">
          <div class="panel panel-default">
            <div class="panel-body">
              <div id="incident_report" />
            </div>
          </div>
          <textarea id="incident_report_add" class="form-control input-sm" rows="3" placeholder="Additional report text..." />
        </div>
      </div>
    </div>

    <script>
      var incident = <javascript t:render="incidentJSON" />;

      var concentricStreetNameByID = <javascript t:render="concentric_street_name_by_id" />;

      //<![CDATA[

      // Add option elements to location address select elements

      hours = range(1, 13);
      for (var i in hours) {
        var hour = padTwo(hours[i]);
        $("#incident_location_address_radial_hour")
          .append(jQuery("<option />", { "value": hour, "text": hour }))
          ;
      }

      minutes = range(0, 12, 5);
      for (var i in minutes) {
        var minute = padTwo(minutes[i]);
        $("#incident_location_address_radial_minute")
          .append(jQuery("<option />", { "value": minute, "text": minute }))
          ;
      }

      for (var id in concentricStreetNameByID) {
        var name = concentricStreetNameByID[id];
        $("#incident_location_address_concentric")
          .append(jQuery("<option />", { "value": id, "text": name }))
          ;
      }

      // Populate incident number

      function drawNumber() {
        $("#incident_number").text(incident.number);
      }

      drawNumber();

      // Populate incident state

      function drawState() {
        selectOptionWithValue(
          $("#incident_state"), stateForIncident(incident)
        );
      }

      drawState();

      // Populate incident priority

      function drawPriority() {
        selectOptionWithValue(
          $("#incident_priority"), priorityNameFromNumber(incident.priority)
        );
      }

      drawPriority();

      // Populate incident summary

      function drawSummary() {
        var summary = summarizeIncident(incident);

        $("#incident_summary").attr("value", summary);
      }

      drawSummary();

      // Populate Rangers list

      var rangerItem = $("#incident_rangers_list")
        .children(".list-group-item:first")
        ;

      function drawRangers() {
        var items = [];

        for (var i in incident.ranger_handles) {
          var item = rangerItem.clone();
          item.append(incident.ranger_handles[i]);
          items.push(item);
        }

        var container = $("#incident_rangers_list");
        container.empty();
        container.append(items);
      }

      drawRangers();

      // Populate incident types list

      var typesItem = $("#incident_types_list")
        .children(".list-group-item:first")
        ;

      function drawIncidentTypes() {
        var items = [];

        for (var i in incident.incident_types) {
          var item = typesItem.clone();
          item.append(incident.incident_types[i]);
          items.push(item);
        }

        var container = $("#incident_types_list");
        container.empty();
        container.append(items);
      }

      drawIncidentTypes();

      // Populate location

      function drawLocationName() {
        if (incident.location != undefined) {
          if (incident.location.name != undefined) {
            $("#incident_location_name").attr("value", incident.location.name);
          }
        }
      }

      drawLocationName();

      function drawLocationAddressRadialHour() {
        var hour = null;
        if (incident.location != undefined) {
          if (incident.location.radial_hour != undefined) {
            hour = padTwo(incident.location.radial_hour);
          }
        }
        selectOptionWithValue(
          $("#incident_location_address_radial_hour"), hour
        );
      }

      drawLocationAddressRadialHour();

      function drawLocationAddressRadialMinute() {
        var minute = null;
        if (incident.location != undefined) {
          if (incident.location.radial_minute != undefined) {
            minute = normalizeMinute(incident.location.radial_minute);
          }
        }
        selectOptionWithValue(
          $("#incident_location_address_radial_minute"), minute
        );
      }

      drawLocationAddressRadialMinute();

      function drawLocationAddressConcentric() {
        var concentric = null;
        if (incident.location != undefined) {
          if (incident.location.concentric != undefined) {
            concentric = incident.location.concentric;
          }
        }
        selectOptionWithValue(
          $("#incident_location_address_concentric"), concentric
        );
      }

      drawLocationAddressConcentric();

      function drawLocationDescription() {
        if (incident.location != undefined) {
          if (incident.location.description != undefined) {
            $("#incident_location_description")
              .attr("value", incident.location.description)
              ;
          }
        }
      }

      drawLocationAddressConcentric();

      // Populate report entry text

      function reportEntryElement(entry) {
        // Build a container for the entry

        var entryContainer = jQuery(
          "<div />", {"class": "report_entry"}
        );

        if (entry.system_entry) {
          entryContainer.addClass("report_entry_system");
        } else {
          entryContainer.addClass("report_entry_user");
        }

        // Add the timestamp and author

        metaDataContainer = jQuery("<p />", {"class": "report_entry_metadata"})

        var timeStampContainer = timeElement(new Date(entry.created));
        timeStampContainer.addClass("report_entry_timestamp");

        metaDataContainer.append([timeStampContainer, ", "]);

        var author = entry.author;
        if (author == undefined) {
          author = "(unknown)";
        }
        var authorContainer = jQuery("<span />");
        authorContainer.text(entry.author);
        authorContainer.addClass("report_entry_author");

        metaDataContainer.append(author);
        metaDataContainer.append(":");

        entryContainer.append(metaDataContainer);

        // Add report text

        var lines = entry.text.split("\n");
        for (var i in lines) {
          var textContainer = jQuery("<p />", {"class": "report_entry_text"});
          textContainer.text(lines[i]);

          entryContainer.append(textContainer);
        }

        // Return container

        return entryContainer;
      }

      function drawReportEntries() {
        var container = $("#incident_report");
        container.empty();

        var entries = incident.report_entries;

        if (entries != undefined) {
          for (var i in entries) {
            container.append(reportEntryElement(entries[i]));
          }
        }
      }

      drawReportEntries();

      //]]>
    </script>

  </div></body>

</html>
