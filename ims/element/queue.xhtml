<!DOCTYPE html>
<html xmlns:t="http://twistedmatrix.com/ns/twisted.web.template/0.1" t:render="root">

  <head>
    <div t:render="head_common" />
    <link type="text/css" rel="stylesheet" media="screen"><t:attr name="href"><t:slot name="datatables_css_url" /></t:attr></link>
    <script><t:attr name="src"><t:slot name="datatables_js_url" /></t:attr></script>
  </head>

  <body><div t:render="container">

    <table class="table table-striped table-hover" id="queue_table">
      <thead>
        <tr>
          <th t:render="table_headers" />
        </tr>
      </thead>
      <tbody />
      <tfoot>
        <tr>
          <th t:render="table_headers" />
        </tr>
      </tfoot>
    </table>

    <script>
      var resultColumns = [
        <javascript t:render="results" />
      ];

      //<![CDATA[

      function orUnknown(stringValue) {
        if (stringValue == undefined) {
          return "?";
        } else {
          return stringValue;
        };
      };

      function priorityNameFromJSON(json) {
        // json should be an int, 1-5.
        switch (json) {
          case 1:
            return "High";
          case 2:
            return "High";
          case 3:
            return "Medium";
          case 4:
            return "Low";
          case 5:
            return "Low";
          default:
            console.log("Unknown incident priority JSON: " + json);
            return "*ERROR*";
        };
      };

      function shortDateFromJSON(json) {
        // json should be an RFC 3339 date-time string.

        // FIXME: August getMonth() is returning 7?
        console.log("TIME:")
        console.log(json);
        var created = new Date(json);
        console.log(created);
        var result = (
          created.getMonth()   + "/" +
          created.getDate()    + "@" +
          created.getHours()   + ":" +
          created.getMinutes()
        );
        console.log(result);
        console.log("------");

        return result;
      };

      function stateNameFromJSON(json) {
        // json should be a string key.
        switch (json) {
          case "new":
            return "New";
          case "on_hold":
            return "On Hold";
          case "dispatched":
            return "Dispatched";
          case "on_scene":
            return "On Scene";
          case "closed":
            return "Closed";
          default:
            console.log("Unknown incident state JSON: " + json);
            return "*ERROR*";
        };
      };

      function rangerHandlesFromJSON(json) {
        // json should be an array of Ranger handles, so no-op.
        return json;
      };

      function locationFromJSON(json) {
        // no-op.
        return json;
      };

      function joinRangerHandles(handles) {
        if (handles == undefined) {
          return "";
        } else {
          return incident.ranger_handles.sort().join(", ");
        };
      };

      function describeLocation(location) {
        if (location == undefined) {
          return "";
        } else {
          var locationBits = [];

          if (location.name != undefined) {
            locationBits.push(location.name);
          };

          switch (location.type) {
            case "text":
              break;
            case "garett":
              var address = "(";
              address += orUnknown(location.radial_hour);

              address += "XXXXX";

              address += ")";
              break;
            default:
              locationBits.push(
                "Unknown location type:" + location.type
              );
              break;
          };

          return locationBits.join(" ");
        };
      };

      function dataHandler(incidents) {
        for (var i in incidents) {
          incident = incidents[i];

          incident.priority       = priorityNameFromJSON(incident.priority);
          incident.timestamp      = shortDateFromJSON(incident.timestamp);
          incident.state          = stateNameFromJSON(incident.state);
          incident.ranger_handles = joinRangerHandles(rangerHandlesFromJSON(incident.ranger_handles));
          incident.location       = describeLocation(locationFromJSON(incident.location));

          incident.incident_types = "INCIDENT TYPES";
          incident.summary = "SUMMARY";
        };

        return incidents;
      };

      $("#queue_table").DataTable({
          "deferRender": true,
          "paging": true,
          "lengthChange": true,
          "lengthMenu": [ [25, 50, 100, -1], ["25", "50", "100", "All"] ],
          "processing": true,
          "scrollX": false, "scrollY": false,
          "ajax": {
              "url": "data",
              "dataSrc": dataHandler,
          },
          "columns": resultColumns,
      });

      $("#result_info").css({"display": "none"});

      //]]>
    </script>

  </div></body>

</html>
