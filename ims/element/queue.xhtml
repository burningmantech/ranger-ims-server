<!DOCTYPE html>
<html xmlns:t="http://twistedmatrix.com/ns/twisted.web.template/0.1" t:render="root">

  <head>
    <div t:render="head_common" />
    <link type="text/css" rel="stylesheet" media="screen"><t:attr name="href"><t:slot name="datatables_css_url" /></t:attr></link>
    <script><t:attr name="src"><t:slot name="datatables_js_url" /></t:attr></script>
  </head>

  <body><div t:render="container">

    <table class="table table-striped table-hover" id="queue_table">
      <thead>
        <tr>
          <th t:render="table_headers" />
        </tr>
      </thead>
      <tbody />
      <tfoot>
        <tr>
          <th t:render="table_headers" />
        </tr>
      </tfoot>
    </table>

    <script>
      var resultColumns = [
        <javascript t:render="results" />
      ];

      //<![CDATA[

      function priorityNameFromJSON(json) {
        // json should be an int, 1-5.
        switch (json) {
          case 1:
            return "High";
          case 2:
            return "High";
          case 3:
            return "Medium";
          case 4:
            return "Low";
          case 5:
            return "Low";
          default:
            console.log("Unknown incident priority JSON: " + json);
            return "<b>*ERROR*</b>";
        };
      };

      function shortDateFromJSON(json) {
        // json should be an RFC 3339 date-time string.

        var created = new Date(json);
        return (
          padTwo(created.getMonth() + 1) + "/" +
          padTwo(created.getDate())      + "@" +
          padTwo(created.getHours())     + ":" +
          padTwo(created.getMinutes())
        );
      };

      function stateNameFromJSON(json) {
        // json should be a string key.
        switch (json) {
          case "new":
            return "New";
          case "on_hold":
            return "On Hold";
          case "dispatched":
            return "Dispatched";
          case "on_scene":
            return "On Scene";
          case "closed":
            return "Closed";
          default:
            console.log("Unknown incident state JSON: " + json);
            return "<b>*ERROR*</b>";
        };
      };

      function rangerHandlesFromJSON(json) {
        if (json == undefined) {
          return [];
        } else {
          // json should be an array of Ranger handles, so no-op.
          return json;
        };
      };

      function locationFromJSON(json) {
        // no-op.
        return json;
      };

      function concentricStreetFromJSON(json) {
        // json should be an int
        // FIXME: Do something useful
        return "#" + json;
      };

      function summaryFromJSON(summary, reportEntries) {
        if (summary == undefined) {
          if (reportEntries == undefined) {
            console.log("No summary provided.");
            return "";
          }
          else {
            // Get the first line of the first report entry.
            for (var i in reportEntries) {
              var lines = reportEntries[i].text.split("\n");

              for (var j in lines) {
                var line = lines[j];
                if (line == undefined || line == "") {
                  continue;
                };
                summary = line;
                break;
              }

              if (summary != undefined) {
                break;
              }
            };

            return summary;
          };

          console.log("No summary provided and no report entry text.");
          return "";
        };

        return summary;
      };

      function padTwo(segment) {
        if (segment == undefined) {
          return "?";
        };

        segment = segment.toString();

        if (segment.length == 1) {
          return "0" + segment;
        };

        return "" + segment;
      };

      function sortAndJoin(strings) {
        if (strings == undefined) {
          return "";
        } else {
          return strings.sort().join(", ");
        };
      };

      function shortDescribeLocation(location) {
        if (location == undefined) {
          return "";
        } else {
          var locationBits = [];

          if (location.name != undefined) {
            locationBits.push(location.name);
          };

          switch (location.type) {
            case "undefined":
              // Fall through to "text" case
            case "text":
              break;
            case "garett":
              locationBits.push(" (");
              locationBits.push(padTwo(location.radial_hour));
              locationBits.push(":");
              locationBits.push(padTwo(location.radial_minute));
              locationBits.push("@");
              locationBits.push(concentricStreetFromJSON(location.concentric));
              locationBits.push(")");
              break;
            default:
              locationBits.push(
                "Unknown location type:" + location.type
              );
              break;
          };

          return locationBits.join("");
        };
      };

      function dataHandler(incidents) {
        for (var i in incidents) {
          incident = incidents[i];

          incident.priority       = priorityNameFromJSON(incident.priority);
          incident.timestamp      = shortDateFromJSON(incident.timestamp);
          incident.state          = stateNameFromJSON(incident.state);
          incident.ranger_handles = sortAndJoin(rangerHandlesFromJSON(incident.ranger_handles));
          incident.location       = shortDescribeLocation(locationFromJSON(incident.location));
          incident.incident_types = sortAndJoin(incident.incident_types);
          incident.summary        = summaryFromJSON(incident.summary, incident.report_entries);

          // Try to save some memory
          incident.report_entries = undefined;
        };

        return incidents;
      };

      $("#queue_table").DataTable({
          "deferRender": true,
          "paging": true,
          "lengthChange": true,
          "lengthMenu": [ [25, 50, 100, -1], ["25", "50", "100", "All"] ],
          "processing": true,
          "scrollX": false, "scrollY": false,
          "ajax": {
              "url": "data",
              "dataSrc": dataHandler,
          },
          "columns": resultColumns,
      });

      $("#result_info").css({"display": "none"});

      //]]>
    </script>

  </div></body>

</html>
