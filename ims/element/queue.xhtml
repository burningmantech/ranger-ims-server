<!DOCTYPE html>
<html xmlns:t="http://twistedmatrix.com/ns/twisted.web.template/0.1" t:render="root">

  <head>
    <div t:render="head_common" />
    <link type="text/css" rel="stylesheet" media="screen"><t:attr name="href"><t:slot name="datatables_bootstrap_css_url" /></t:attr></link>
    <script><t:attr name="src"><t:slot name="datatables_js_url" /></t:attr></script>
    <script><t:attr name="src"><t:slot name="datatables_bootstrap_js_url" /></t:attr></script>
  </head>

  <body><div t:render="container">

    <table class="table table-striped table-hover" id="queue_table">
      <thead>
        <tr>
          <th t:render="table_headers" />
        </tr>
      </thead>
      <tbody />
      <tfoot>
        <tr>
          <th t:render="table_headers" />
        </tr>
      </tfoot>
    </table>

    <script>
      var dataURL      = "<javascript t:render="data_url"      />";
      var incidentsURL = "<javascript t:render="incidents_url" />";

      var columns = <javascript t:render="columns" />;

      var concentricStreetNameByNumber = <javascript t:render="concentric_street_name_by_number" />;

      //<![CDATA[

      function padTwo(segment) {
        if (segment == undefined) {
          return "?";
        };

        segment = segment.toString();

        if (segment.length == 1) {
          return "0" + segment;
        };

        return "" + segment;
      };

      function sortAndJoin(strings) {
        if (strings == undefined) {
          return "";
        } else {
          return strings.sort().join(", ");
        };
      };

      function priorityNameFromJSON(json) {
        // json should be an int, 1-5.
        switch (json) {
          case 1:
            return "⬆︎";
          case 2:
            return "⬆︎";
          case 3:
            return "•";
          case 4:
            return "⬇︎";
          case 5:
            return "⬇︎";
          default:
            console.log("Unknown incident priority JSON: " + json);
            return "<b>*ERROR*</b>";
        };
      };

      function shortFormatDate(date) {
        return (
          padTwo(date.getMonth() + 1) + "/" +
          padTwo(date.getDate())      + "@" +
          padTwo(date.getHours())     + ":" +
          padTwo(date.getMinutes())
        );
      };

      function stateNameFromJSON(json) {
        // json should be a string key.
        switch (json) {
          case "new":
            return "New";
          case "on_hold":
            return "On Hold";
          case "dispatched":
            return "Dispatched";
          case "on_scene":
            return "On Scene";
          case "closed":
            return "Closed";
          default:
            console.log("Unknown incident state JSON: " + json);
            return "<b>*ERROR*</b>";
        };
      };

      function summarize(incident) {
        var summary = incident.summary;
        var reportEntries = incident.report_entries;

        if (summary == undefined) {
          if (reportEntries == undefined) {
            console.log("No summary provided.");
            return "";
          }
          else {
            // Get the first line of the first report entry.
            for (var i in reportEntries) {
              var lines = reportEntries[i].text.split("\n");

              for (var j in lines) {
                var line = lines[j];
                if (line == undefined || line == "") {
                  continue;
                };
                summary = line;
                break;
              }

              if (summary != undefined) {
                break;
              }
            };

            return summary;
          };

          console.log("No summary provided and no report entry text.");
          return "";
        };

        return summary;
      };

      function concentricStreetFromJSON(json) {
        // json should be an int
        if (json == undefined) {
          return "?";
        }

        var name = concentricStreetNameByNumber[json];
        if (name == undefined) {
          console.log("Unknown street ID: " + json);
          name = "<b>*ERROR</b>";
        };
        return name;
      };

      function shortDescribeLocation(location) {
        var locationBits = [];

        if (location.name != undefined) {
          locationBits.push(location.name);
        };

        switch (location.type) {
          case "undefined":
            // Fall through to "text" case
          case "text":
            break;
          case "garett":
            locationBits.push(" (");
            locationBits.push(padTwo(location.radial_hour));
            locationBits.push(":");
            locationBits.push(padTwo(location.radial_minute));
            locationBits.push("@");
            locationBits.push(concentricStreetFromJSON(location.concentric));
            locationBits.push(")");
            break;
          default:
            locationBits.push(
              "Unknown location type:" + location.type
            );
            break;
        };

        return locationBits.join("");
      };

      function dataHandler(incidents) {
        for (var i in incidents) {
          incident = incidents[i];
          incident.timestamp = new Date(incident.timestamp);
        };

        return incidents;
      };

      function renderPriorityCell(cell, data, incident, rowIndex, colIndex) {
        $(cell).html(priorityNameFromJSON(data));
      };

      function renderDateTimeCell(cell, data, incident, rowIndex, colIndex) {
        $(cell).html(shortFormatDate(data));
      };

      function renderStateCell(cell, data, incident, rowIndex, colIndex) {
        $(cell).html(stateNameFromJSON(data));
      };

      function renderArrayCell(cell, data, incident, rowIndex, colIndex) {
        $(cell).html(sortAndJoin(data));
      };

      function renderLocationCell(cell, data, incident, rowIndex, colIndex) {
        $(cell).html(shortDescribeLocation(data));
      };

      function renderSummaryCell(cell, data, incident, rowIndex, colIndex) {
        $(cell).html(summarize(incident));
      };

      $("#queue_table").DataTable({
          "deferRender": true,
          "paging": true,
          "lengthChange": true,
          "lengthMenu": [ [50, 100, -1], ["50", "100", "All"] ],
          "processing": true,
          "scrollX": false, "scrollY": false,
          "ajax": {
              "url": dataURL,
              "dataSrc": dataHandler,
          },
          "columns": columns,
          "columnDefs": [
            { targets: 1, createdCell: renderPriorityCell },
            { targets: 2, createdCell: renderDateTimeCell },
            { targets: 3, createdCell: renderStateCell },
            { targets: 4, createdCell: renderArrayCell },
            { targets: 5, createdCell: renderLocationCell, defaultContent: {} },
            { targets: 6, createdCell: renderArrayCell },
            { targets: 7, createdCell: renderSummaryCell, defaultContent: {} },
          ],
          "createdRow": function (row, incident, index) {
            $(row).click(function () {
              document.location.href = incidentsURL + "/" + incident.number;
            });
          }
      });

      $("#result_info").css({"display": "none"});

      //]]>
    </script>

  </div></body>

</html>
